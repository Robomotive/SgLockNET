using System.Runtime.InteropServices;

namespace SgLockNET;

/// <content>The authentication part of the lock.</content>
internal static partial class SgLockNative
{
    /// <summary>
    /// Authentication of SG-Lock library to the protected application and vice versa.
    /// </summary>
    /// <param name="authenticationCode">48 byte sequence, that is unique to every SG-Lock customer</param>
    /// <param name="applicationRandomNumber">
    /// Random numbers generated by the app to check the library. value is changed by library.
    /// </param>
    /// <param name="libraryRandomNumber">Random numbers generated by the library</param>
    /// <returns>A <see cref="ReturnCode"/> indicating the result.</returns>
    /// <remarks>
    /// This function of the SG-Lock API has to be called once first and successfully to enable all
    /// other API functions.In the case of dynamic linking the authentication is required after
    /// every link procedure(LoadLibrary call). Every customer get his unique Authentication code
    /// when purchasing SG-Lock(non Demo) the first time.Demo kits have an own authentication
    /// code(see example source code files).
    /// </remarks>
    // public static extern UInt32 SglAuthentA([Out] UInt32[] AuhtentCode, [In, Out] UInt32[] AppRandNum ,[In] UInt32[] LibRandNum);
    [LibraryImport(LibName, EntryPoint = "SglAuthentA")]
    public static partial ReturnCode Authenticate(uint[] authenticationCode, uint[] applicationRandomNumber, uint[] libraryRandomNumber);

    /// <summary>
    /// Authentication of SG-Lock library to the protected application and vice versa.
    /// </summary>
    /// <param name="libraryRandomNumber">Random numbers generated by the library</param>
    /// <returns>A <see cref="ReturnCode"/> indicating the result.</returns>
    /// <remarks>
    /// This function of the SG-Lock API has to be called once first and successfully to enable all
    /// other API functions.In the case of dynamic linking the authentication is required after
    /// every link procedure(LoadLibrary call). Every customer get his unique Authentication code
    /// when purchasing SG-Lock(non Demo) the first time.Demo kits have an own authentication
    /// code(see exam-ple source code files).
    /// </remarks>
    // public static extern UInt32 SglAuthentB([Out] UInt32[] LibRandNum);
    [LibraryImport(LibName, EntryPoint = "SglAuthentB")]
    public static partial ReturnCode Authenticate(uint[] libraryRandomNumber);
}
